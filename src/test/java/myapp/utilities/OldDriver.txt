 package myapp.utilities;

 import io.github.bonigarcia.wdm.WebDriverManager;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.chrome.ChromeDriver;
 import org.openqa.selenium.chrome.ChromeOptions;
 import org.openqa.selenium.edge.EdgeDriver;
 import org.openqa.selenium.firefox.FirefoxDriver;
 import org.openqa.selenium.safari.SafariDriver;

 import java.time.Duration;

 public class Driver {

     //This is SIMPLE Driver class.. created on Singleton design pattern.. but we will make it more dynamic later on.

     private static WebDriver driver;

     public static WebDriver getDriver() {
         if (driver == null) {
             switch (ConfigReader.getProperty("browser")){
                 case "chrome":
                     WebDriverManager.chromedriver().setup();
                     driver = new ChromeDriver();
                     break;
                 case "firefox":
                     WebDriverManager.firefoxdriver().setup();
                     driver = new FirefoxDriver();
                     break;
                 case "safari":
                     WebDriverManager.safaridriver().setup();
                     driver = new SafariDriver();
                     break;
                 case "edge":
                     WebDriverManager.edgedriver().setup();
                     driver = new EdgeDriver();
                     break;
                 case "chrome-headless":
                     WebDriverManager.chromedriver().setup();
                     ChromeOptions options = new ChromeOptions();
                     options.addArguments("--headless=new");
                     driver = new ChromeDriver(options);
                     break;
             }
             driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
             driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));
             driver.manage().window().maximize();
         }
         return driver;
     }

     public static void closeDriver() {
         if (driver != null) //if driver is pointing anywhere
             driver.quit(); //quit when I call closeDriver
         driver = null; ;//make the driver null so when we call getDriver, we can open the driver again
     }
 }
